#!/usr/bin/env python3
"""
SIPX - Demonstra√ß√£o Completa de Funcionalidades com Asterisk

Este script demonstra TODAS as funcionalidades implementadas no SIPX
usando o servidor Asterisk configurado no Docker.

Funcionalidades demonstradas:
1. Registro com autentica√ß√£o digest
2. Verifica√ß√£o de capacidades (OPTIONS)
3. Chamada INVITE com SDP
4. Envio de ACK
5. Mensagens instant√¢neas (MESSAGE)
6. T√©rmino de chamada (BYE)
7. Handlers customizados
8. State management (Transactions e Dialogs)
9. M√∫ltiplos transports (UDP, TCP)
10. Servidor SIP para receber chamadas

Pr√©-requisitos:
- Docker com Asterisk rodando (docker-compose up -d)
- Porta 5060 UDP/TCP dispon√≠vel no host
- Python 3.12+

Uso:
    # Do diret√≥rio raiz do projeto:
    uv run python examples/asterisk_complete_demo.py

    # Ou se voc√™ instalou o pacote:
    python examples/asterisk_complete_demo.py

Ou com op√ß√µes:
    uv run python examples/asterisk_complete_demo.py --asterisk-host 192.168.1.100 --transport TCP
"""

import argparse
import sys
import time
from pathlib import Path
from typing import Optional

# Adicionar o diret√≥rio pai ao path para importar sipx
sys.path.insert(0, str(Path(__file__).parent.parent))

# Rich para output bonito
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich import box

# SIPX imports
from sipx import (
    Client,
    SIPServer,
    SipAuthCredentials,
    Request,
    Response,
)

# Handlers
from sipx._handlers import (
    SipFlowHandler,
    AuthenticationHandler,
)

# FSM
from sipx import TransactionState, DialogState

# Console para output
console = Console()


# =============================================================================
# CONFIGURA√á√ïES
# =============================================================================


class Config:
    """Configura√ß√µes do demo."""

    # Asterisk
    ASTERISK_HOST = "127.0.0.1"
    ASTERISK_PORT = 5060

    # Credenciais dos usu√°rios configurados no Asterisk
    USER_1111 = SipAuthCredentials(username="1111", password="1111xxx")
    USER_2222 = SipAuthCredentials(username="2222", password="2222xxx")
    USER_3333 = SipAuthCredentials(username="3333", password="3333xxx")

    # Transport
    TRANSPORT = "UDP"  # UDP, TCP, ou TLS

    # Timing
    WAIT_TIME = 2  # Segundos entre opera√ß√µes
    CALL_DURATION = 5  # Dura√ß√£o da chamada em segundos


# =============================================================================
# SDP TEMPLATES
# =============================================================================


def create_sdp_offer(local_ip: str = "192.168.1.100", local_port: int = 10000) -> str:
    """Cria SDP offer para INVITE."""
    return f"""v=0
o=- {int(time.time())} {int(time.time())} IN IP4 {local_ip}
s=SIPX Demo Call
c=IN IP4 {local_ip}
t=0 0
m=audio {local_port} RTP/AVP 0 8 101
a=rtpmap:0 PCMU/8000
a=rtpmap:8 PCMA/8000
a=rtpmap:101 telephone-event/8000
a=fmtp:101 0-16
a=ptime:20
a=sendrecv
"""


# =============================================================================
# CALLBACKS PARA HANDLERS
# =============================================================================


class DemoCallbacks:
    """Callbacks para demonstrar handlers."""

    @staticmethod
    def on_ringing(response: Response, context) -> None:
        """Callback quando recebe 180 Ringing."""
        console.print("\n[bold yellow]üìû RINGING![/bold yellow]")
        console.print(f"   Call-ID: {response.call_id}")
        console.print(f"   From: {response.headers.get('From', 'N/A')}")
        console.print(f"   To: {response.headers.get('To', 'N/A')}")

    @staticmethod
    def on_session_progress(response: Response, context) -> None:
        """Callback quando recebe 183 Session Progress."""
        console.print("\n[bold cyan]üîä SESSION PROGRESS (Early Media)[/bold cyan]")
        if response.content:
            console.print(f"   SDP Answer length: {len(response.content)} bytes")

    @staticmethod
    def on_answered(response: Response, context) -> None:
        """Callback quando recebe 200 OK (call answered)."""
        console.print("\n[bold green]‚úÖ CALL ANSWERED![/bold green]")

        # Extrair SDP answer
        if response.content:
            sdp = response.content.decode("utf-8")
            console.print("\n[bold]Remote SDP:[/bold]")
            console.print(Panel(sdp, title="SDP Answer", border_style="green"))

    @staticmethod
    def on_confirmed(response: Response, context) -> None:
        """Callback quando ACK √© enviado."""
        console.print("\n[bold green]‚úÖ ACK SENT - Call Confirmed![/bold green]")

    @staticmethod
    def on_registered(response: Response, context) -> None:
        """Callback quando registro √© bem-sucedido."""
        console.print("\n[bold green]‚úÖ REGISTERED![/bold green]")

        # Extrair informa√ß√µes √∫teis
        expires = response.headers.get("Expires", "N/A")
        contact = response.headers.get("Contact", "N/A")

        console.print(f"   Expires: {expires} seconds")
        console.print(f"   Contact: {contact}")

    @staticmethod
    def on_unregistered(response: Response, context) -> None:
        """Callback quando unregister √© confirmado."""
        console.print("\n[bold yellow]üì§ UNREGISTERED[/bold yellow]")

    @staticmethod
    def on_registration_failed(response: Response, context) -> None:
        """Callback quando registro falha."""
        console.print(
            f"\n[bold red]‚ùå REGISTRATION FAILED: {response.status_code}[/bold red]"
        )

    @staticmethod
    def on_transaction_state_change(transaction) -> None:
        """Callback para mudan√ßa de estado de transa√ß√£o."""
        console.print(
            f"[dim]   Transaction {transaction.id[:8]}... ‚Üí {transaction.state.name}[/dim]"
        )

    @staticmethod
    def on_dialog_state_change(dialog) -> None:
        """Callback para mudan√ßa de estado de di√°logo."""
        console.print(f"[dim]   Dialog {dialog.id[:8]}... ‚Üí {dialog.state.name}[/dim]")


# =============================================================================
# DEMONSTRA√á√ïES
# =============================================================================


class SIPXDemo:
    """Classe principal para demonstra√ß√µes."""

    def __init__(self, config: Config):
        self.config = config
        self.client: Optional[Client] = None
        self.server: Optional[SIPServer] = None

    def print_header(self, title: str, subtitle: str = "") -> None:
        """Imprime cabe√ßalho de se√ß√£o."""
        console.print("\n" + "=" * 80)
        console.print(f"[bold cyan]{title}[/bold cyan]")
        if subtitle:
            console.print(f"[dim]{subtitle}[/dim]")
        console.print("=" * 80 + "\n")

    def create_client(
        self, credentials: SipAuthCredentials, local_port: int = 5070
    ) -> Client:
        """Cria cliente SIP com handlers configurados."""

        # Criar cliente
        client = Client(
            local_host="0.0.0.0",
            local_port=local_port,
            transport=self.config.TRANSPORT,
            credentials=credentials,
        )

        # Adicionar handlers
        # 1. Authentication handler (necess√°rio para auto-retry)
        client.add_handler(AuthenticationHandler(credentials))

        # 2. Flow handlers com callbacks
        client.add_handler(
            SipFlowHandler(
                state_manager=client.state_manager,
                on_ringing=DemoCallbacks.on_ringing,
                on_answered=DemoCallbacks.on_answered,
                on_confirmed=DemoCallbacks.on_confirmed,
                on_registered=DemoCallbacks.on_registered,
                on_unregistered=DemoCallbacks.on_unregistered,
            )
        )

        # 3. State tracking
        client.state_manager.on_transaction_state(
            TransactionState.PROCEEDING, DemoCallbacks.on_transaction_state_change
        )
        client.state_manager.on_transaction_state(
            TransactionState.COMPLETED, DemoCallbacks.on_transaction_state_change
        )
        client.state_manager.on_dialog_state(
            DialogState.CONFIRMED, DemoCallbacks.on_dialog_state_change
        )

        return client

    def demo_1_register(self) -> None:
        """Demo 1: Registro b√°sico com autentica√ß√£o."""
        self.print_header(
            "DEMO 1: REGISTER - Registro com Autentica√ß√£o Digest",
            "Demonstra autentica√ß√£o autom√°tica e retry com credenciais",
        )

        # Criar cliente
        client = self.create_client(self.config.USER_1111)

        try:
            # Registrar
            console.print("[bold]Registrando usu√°rio 1111...[/bold]")
            response = client.register(
                aor=f"sip:1111@{self.config.ASTERISK_HOST}",
                registrar=self.config.ASTERISK_HOST,
                port=self.config.ASTERISK_PORT,
                expires=3600,
            )

            # Verificar resultado
            if response.status_code == 200:
                console.print("\n[bold green]‚úÖ Registro bem-sucedido![/bold green]")

                # Mostrar estat√≠sticas
                stats = client.state_manager.get_statistics()

                table = Table(title="Estat√≠sticas da Transa√ß√£o", box=box.ROUNDED)
                table.add_column("M√©trica", style="cyan")
                table.add_column("Valor", style="green")

                table.add_row(
                    "Total de transa√ß√µes", str(stats["transactions"]["total"])
                )
                table.add_row("Total de di√°logos", str(stats["dialogs"]["total"]))

                # Estados das transa√ß√µes
                for state, count in stats["transactions"]["by_state"].items():
                    table.add_row(f"  {state}", str(count))

                console.print("\n", table)
            else:
                console.print(
                    f"\n[bold red]‚ùå Registro falhou: {response.status_code}[/bold red]"
                )

        finally:
            client.close()
            time.sleep(self.config.WAIT_TIME)

    def demo_2_options(self) -> None:
        """Demo 2: Verifica√ß√£o de capacidades do servidor."""
        self.print_header(
            "DEMO 2: OPTIONS - Verifica√ß√£o de Capacidades",
            "Consulta m√©todos e codecs suportados pelo servidor",
        )

        client = self.create_client(self.config.USER_1111)

        try:
            console.print("[bold]Enviando OPTIONS...[/bold]")
            response = client.options(
                uri=f"sip:{self.config.ASTERISK_HOST}",
                host=self.config.ASTERISK_HOST,
                port=self.config.ASTERISK_PORT,
            )

            if response.status_code == 200:
                console.print("\n[bold green]‚úÖ OPTIONS bem-sucedido![/bold green]")

                # Mostrar capacidades
                table = Table(title="Capacidades do Servidor", box=box.ROUNDED)
                table.add_column("Header", style="cyan")
                table.add_column("Valor", style="green")

                if "Allow" in response.headers:
                    table.add_row("Allow (M√©todos)", response.headers["Allow"])

                if "Accept" in response.headers:
                    table.add_row("Accept (Content-Types)", response.headers["Accept"])

                if "Supported" in response.headers:
                    table.add_row(
                        "Supported (Extensions)", response.headers["Supported"]
                    )

                console.print("\n", table)

        finally:
            client.close()
            time.sleep(self.config.WAIT_TIME)

    def demo_3_invite_full_flow(self) -> None:
        """Demo 3: Fluxo completo de INVITE (call)."""
        self.print_header(
            "DEMO 3: INVITE - Chamada Completa com SDP",
            "INVITE ‚Üí 180 Ringing ‚Üí 200 OK ‚Üí ACK ‚Üí BYE ‚Üí 200 OK",
        )

        client = self.create_client(self.config.USER_1111, local_port=5070)

        try:
            # 1. Registrar primeiro
            console.print("[bold]Passo 1: Registrando usu√°rio 1111...[/bold]")
            reg_response = client.register(
                aor=f"sip:1111@{self.config.ASTERISK_HOST}",
                registrar=self.config.ASTERISK_HOST,
                port=self.config.ASTERISK_PORT,
            )

            if reg_response.status_code != 200:
                console.print("[bold red]‚ùå Registro falhou, abortando...[/bold red]")
                return

            time.sleep(1)

            # 2. Fazer chamada para echo test (extens√£o 100)
            console.print(
                "\n[bold]Passo 2: Chamando extens√£o 100 (Echo Test)...[/bold]"
            )

            # Criar SDP
            sdp = create_sdp_offer(local_ip=client.local_address.host, local_port=10000)

            console.print("\n[bold]SDP Offer:[/bold]")
            console.print(Panel(sdp, title="Local SDP", border_style="cyan"))

            # INVITE
            invite_response = client.invite(
                to_uri=f"sip:100@{self.config.ASTERISK_HOST}",
                from_uri=f"sip:1111@{self.config.ASTERISK_HOST}",
                host=self.config.ASTERISK_HOST,
                port=self.config.ASTERISK_PORT,
                sdp_content=sdp,
            )

            if invite_response.status_code == 200:
                console.print("\n[bold green]‚úÖ Chamada estabelecida![/bold green]")

                # Aguardar alguns segundos (simular conversa√ß√£o)
                console.print(
                    f"\n[bold yellow]‚è±Ô∏è  Mantendo chamada por {self.config.CALL_DURATION} segundos...[/bold yellow]"
                )

                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=console,
                ) as progress:
                    task = progress.add_task("Chamada ativa...", total=None)
                    time.sleep(self.config.CALL_DURATION)

                # 3. Desligar
                console.print("\n[bold]Passo 3: Encerrando chamada (BYE)...[/bold]")
                bye_response = client.bye()

                if bye_response.status_code == 200:
                    console.print(
                        "\n[bold green]‚úÖ Chamada encerrada com sucesso![/bold green]"
                    )
                else:
                    console.print(
                        f"\n[bold red]‚ùå BYE falhou: {bye_response.status_code}[/bold red]"
                    )

            elif invite_response.status_code == 486:
                console.print(
                    "\n[bold yellow]‚ö†Ô∏è  Busy Here - Extens√£o ocupada[/bold yellow]"
                )
            elif invite_response.status_code == 487:
                console.print(
                    "\n[bold yellow]‚ö†Ô∏è  Request Terminated - Chamada cancelada[/bold yellow]"
                )
            else:
                console.print(
                    f"\n[bold red]‚ùå INVITE falhou: {invite_response.status_code}[/bold red]"
                )

        finally:
            client.close()
            time.sleep(self.config.WAIT_TIME)

    def demo_4_message(self) -> None:
        """Demo 4: Envio de mensagem instant√¢nea (MESSAGE)."""
        self.print_header(
            "DEMO 4: MESSAGE - Mensagem Instant√¢nea",
            "Envia mensagem de texto para outro usu√°rio",
        )

        client = self.create_client(self.config.USER_1111)

        try:
            # Registrar
            console.print("[bold]Registrando usu√°rio 1111...[/bold]")
            client.register(
                aor=f"sip:1111@{self.config.ASTERISK_HOST}",
                registrar=self.config.ASTERISK_HOST,
            )

            time.sleep(1)

            # Enviar mensagem
            console.print("\n[bold]Enviando MESSAGE para usu√°rio 2222...[/bold]")

            message_text = "Ol√° do SIPX! Esta √© uma mensagem de teste. üëã"

            response = client.message(
                to_uri=f"sip:2222@{self.config.ASTERISK_HOST}",
                from_uri=f"sip:1111@{self.config.ASTERISK_HOST}",
                host=self.config.ASTERISK_HOST,
                port=self.config.ASTERISK_PORT,
                content=message_text,
                content_type="text/plain; charset=utf-8",
            )

            if response.status_code == 200:
                console.print(
                    "\n[bold green]‚úÖ Mensagem enviada com sucesso![/bold green]"
                )
                console.print(f"   Conte√∫do: {message_text}")
            else:
                console.print(
                    f"\n[bold red]‚ùå MESSAGE falhou: {response.status_code}[/bold red]"
                )

        finally:
            client.close()
            time.sleep(self.config.WAIT_TIME)

    def demo_5_multiple_transports(self) -> None:
        """Demo 5: Demonstra√ß√£o de m√∫ltiplos transports."""
        self.print_header("DEMO 5: M√∫ltiplos Transports", "Demonstra uso de UDP e TCP")

        for transport in ["UDP", "TCP"]:
            console.print(f"\n[bold cyan]Testando com {transport}...[/bold cyan]")

            # Criar config customizado
            old_transport = self.config.TRANSPORT
            self.config.TRANSPORT = transport

            client = self.create_client(
                self.config.USER_1111, local_port=5070 if transport == "UDP" else 5071
            )

            try:
                response = client.options(
                    uri=f"sip:{self.config.ASTERISK_HOST}",
                    host=self.config.ASTERISK_HOST,
                    port=self.config.ASTERISK_PORT,
                )

                if response.status_code == 200:
                    console.print(
                        f"[bold green]‚úÖ {transport} funcionando![/bold green]"
                    )
                    console.print(f"   Transport info: {response.transport_info}")
                else:
                    console.print(
                        f"[bold red]‚ùå {transport} falhou: {response.status_code}[/bold red]"
                    )

            finally:
                client.close()
                self.config.TRANSPORT = old_transport
                time.sleep(1)

    def demo_6_state_management(self) -> None:
        """Demo 6: Demonstra√ß√£o de state management."""
        self.print_header(
            "DEMO 6: State Management", "Rastreamento de Transactions e Dialogs"
        )

        client = self.create_client(self.config.USER_1111)

        try:
            console.print("[bold]Criando m√∫ltiplas transa√ß√µes...[/bold]\n")

            # 1. REGISTER
            console.print("1. REGISTER...")
            client.register(
                aor=f"sip:1111@{self.config.ASTERISK_HOST}",
                registrar=self.config.ASTERISK_HOST,
            )

            time.sleep(1)

            # 2. OPTIONS
            console.print("2. OPTIONS...")
            client.options(
                uri=f"sip:{self.config.ASTERISK_HOST}",
                host=self.config.ASTERISK_HOST,
            )

            time.sleep(1)

            # 3. MESSAGE
            console.print("3. MESSAGE...")
            client.message(
                to_uri=f"sip:2222@{self.config.ASTERISK_HOST}",
                from_uri=f"sip:1111@{self.config.ASTERISK_HOST}",
                host=self.config.ASTERISK_HOST,
                content="Test message",
            )

            # Mostrar estat√≠sticas finais
            console.print("\n[bold]Estat√≠sticas Finais:[/bold]")
            stats = client.state_manager.get_statistics()

            table = Table(title="State Manager Statistics", box=box.DOUBLE)
            table.add_column("Categoria", style="cyan", no_wrap=True)
            table.add_column("M√©trica", style="yellow")
            table.add_column("Valor", justify="right", style="green")

            table.add_row("Transactions", "Total", str(stats["transactions"]["total"]))
            for state, count in stats["transactions"]["by_state"].items():
                table.add_row("", state, str(count))

            table.add_row("Dialogs", "Total", str(stats["dialogs"]["total"]))
            for state, count in stats["dialogs"]["by_state"].items():
                table.add_row("", state, str(count))

            console.print("\n", table)

        finally:
            client.close()
            time.sleep(self.config.WAIT_TIME)

    def demo_7_server(self) -> None:
        """Demo 7: Servidor SIP recebendo requests."""
        self.print_header(
            "DEMO 7: SIP Server", "Servidor escutando e respondendo a requests"
        )

        console.print("[bold yellow]‚ö†Ô∏è  Esta demo requer intera√ß√£o manual[/bold yellow]")
        console.print("O servidor ficar√° escutando por 30 segundos.")
        console.print("Use outro cliente SIP para enviar requests.\n")

        # Handler customizado para MESSAGE
        def handle_message(request: Request, source) -> Response:
            console.print(
                f"\n[bold green]üì® MESSAGE recebido de {source.host}:{source.port}[/bold green]"
            )

            if request.content:
                content = request.content.decode("utf-8", errors="ignore")
                console.print(
                    Panel(content, title="Conte√∫do da Mensagem", border_style="green")
                )

            return Response(
                status_code=200,
                reason_phrase="OK",
                headers={
                    "Via": request.via or "",
                    "From": request.from_header or "",
                    "To": request.to_header or "",
                    "Call-ID": request.call_id or "",
                    "CSeq": request.cseq or "",
                    "Content-Length": "0",
                },
            )

        # Criar servidor
        server = SIPServer(
            local_host="0.0.0.0",
            local_port=5080,  # Porta diferente para n√£o conflitar
        )

        # Registrar handler customizado
        server.register_handler("MESSAGE", handle_message)

        # Iniciar servidor
        console.print("[bold]Iniciando servidor na porta 5080...[/bold]")
        server.start()

        console.print("[bold green]‚úÖ Servidor rodando![/bold green]")
        console.print("\nAguardando requests por 30 segundos...")
        console.print("Exemplo de comando para testar:")
        console.print("  [dim]# De outro terminal/m√°quina:[/dim]")
        console.print(
            f"  [cyan]# Enviar MESSAGE para sip:test@{self.config.ASTERISK_HOST}:5080[/cyan]\n"
        )

        # Aguardar
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task("Servidor escutando...", total=None)
            time.sleep(30)

        # Parar servidor
        console.print("\n[bold]Parando servidor...[/bold]")
        server.stop()
        console.print("[bold green]‚úÖ Servidor parado[/bold green]")

        time.sleep(self.config.WAIT_TIME)

    def demo_8_complete_workflow(self) -> None:
        """Demo 8: Workflow completo com m√∫ltiplos usu√°rios."""
        self.print_header(
            "DEMO 8: Workflow Completo",
            "Simula cen√°rio real: registro, chamada, mensagem, unregister",
        )

        client = self.create_client(self.config.USER_1111)

        try:
            # 1. Register
            console.print("[bold cyan]Etapa 1/5: Registro[/bold cyan]")
            reg = client.register(
                aor=f"sip:1111@{self.config.ASTERISK_HOST}",
                registrar=self.config.ASTERISK_HOST,
                expires=1800,
            )
            console.print(f"Status: {reg.status_code}")
            time.sleep(2)

            # 2. Verificar server
            console.print("\n[bold cyan]Etapa 2/5: Verifica√ß√£o do Servidor[/bold cyan]")
            opts = client.options(
                uri=f"sip:{self.config.ASTERISK_HOST}",
                host=self.config.ASTERISK_HOST,
            )
            console.print(f"Status: {opts.status_code}")
            time.sleep(2)

            # 3. Enviar mensagem
            console.print("\n[bold cyan]Etapa 3/5: Enviar Mensagem[/bold cyan]")
            msg = client.message(
                to_uri=f"sip:2222@{self.config.ASTERISK_HOST}",
                from_uri=f"sip:1111@{self.config.ASTERISK_HOST}",
                host=self.config.ASTERISK_HOST,
                content="Ol√° do workflow completo!",
            )
            console.print(f"Status: {msg.status_code}")
            time.sleep(2)

            # 4. Fazer chamada
            console.print("\n[bold cyan]Etapa 4/5: Chamada (Echo Test)[/bold cyan]")
            sdp = create_sdp_offer()
            inv = client.invite(
                to_uri=f"sip:100@{self.config.ASTERISK_HOST}",
                from_uri=f"sip:1111@{self.config.ASTERISK_HOST}",
                host=self.config.ASTERISK_HOST,
                sdp_content=sdp,
            )
            console.print(f"Status: {inv.status_code}")

            if inv.status_code == 200:
                time.sleep(3)
                bye = client.bye()
                console.print(f"BYE Status: {bye.status_code}")

            time.sleep(2)

            # 5. Unregister
            console.print("\n[bold cyan]Etapa 5/5: Unregister[/bold cyan]")
            unreg = client.register(
                aor=f"sip:1111@{self.config.ASTERISK_HOST}",
                registrar=self.config.ASTERISK_HOST,
                expires=0,  # Expires=0 para unregister
            )
            console.print(f"Status: {unreg.status_code}")

            # Summary
            console.print("\n[bold green]‚úÖ Workflow Completo Finalizado![/bold green]")

            summary = Table(title="Resumo do Workflow", box=box.ROUNDED)
            summary.add_column("Opera√ß√£o", style="cyan")
            summary.add_column("Status", justify="center")

            summary.add_row("REGISTER", "‚úÖ" if reg.status_code == 200 else "‚ùå")
            summary.add_row("OPTIONS", "‚úÖ" if opts.status_code == 200 else "‚ùå")
            summary.add_row("MESSAGE", "‚úÖ" if msg.status_code == 200 else "‚ùå")
            summary.add_row("INVITE", "‚úÖ" if inv.status_code == 200 else "‚ùå")
            summary.add_row("UNREGISTER", "‚úÖ" if unreg.status_code == 200 else "‚ùå")

            console.print("\n", summary)

        finally:
            client.close()

    def run_all_demos(self, skip_interactive: bool = False) -> None:
        """Executa todas as demos em sequ√™ncia."""
        console.print(
            Panel.fit(
                "[bold cyan]SIPX - Demonstra√ß√£o Completa de Funcionalidades[/bold cyan]\n"
                f"Asterisk: {self.config.ASTERISK_HOST}:{self.config.ASTERISK_PORT}\n"
                f"Transport: {self.config.TRANSPORT}",
                border_style="cyan",
            )
        )

        demos = [
            ("REGISTER", self.demo_1_register),
            ("OPTIONS", self.demo_2_options),
            ("INVITE Flow", self.demo_3_invite_full_flow),
            ("MESSAGE", self.demo_4_message),
            ("Multiple Transports", self.demo_5_multiple_transports),
            ("State Management", self.demo_6_state_management),
            ("Complete Workflow", self.demo_8_complete_workflow),
        ]

        # Adicionar demo do servidor se n√£o for skip interactive
        if not skip_interactive:
            demos.append(("SIP Server", self.demo_7_server))

        for i, (name, demo_func) in enumerate(demos, 1):
            try:
                console.print(
                    f"\n[bold yellow]>>> Executando Demo {i}/{len(demos)}: {name}[/bold yellow]"
                )
                demo_func()
                console.print(f"[bold green]‚úÖ Demo {i} completa[/bold green]")
            except KeyboardInterrupt:
                console.print(
                    "\n[bold red]‚ùå Demo interrompida pelo usu√°rio[/bold red]"
                )
                break
            except Exception as e:
                console.print(f"\n[bold red]‚ùå Erro na demo {i}: {e}[/bold red]")
                import traceback

                traceback.print_exc()

        console.print("\n" + "=" * 80)
        console.print("[bold green]üéâ Todas as demos finalizadas![/bold green]")
        console.print("=" * 80)


# =============================================================================
# MAIN
# =============================================================================


def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(
        description="SIPX - Demonstra√ß√£o completa de funcionalidades com Asterisk"
    )

    parser.add_argument(
        "--asterisk-host",
        default="127.0.0.1",
        help="Endere√ßo do servidor Asterisk (default: 127.0.0.1)",
    )

    parser.add_argument(
        "--asterisk-port",
        type=int,
        default=5060,
        help="Porta do servidor Asterisk (default: 5060)",
    )

    parser.add_argument(
        "--transport",
        choices=["UDP", "TCP", "TLS"],
        default="UDP",
        help="Protocolo de transporte (default: UDP)",
    )

    parser.add_argument(
        "--demo", type=int, choices=range(1, 9), help="Executar demo espec√≠fica (1-8)"
    )

    parser.add_argument(
        "--skip-interactive",
        action="store_true",
        help="Pular demos que requerem intera√ß√£o manual",
    )

    args = parser.parse_args()

    # Configurar
    config = Config()
    config.ASTERISK_HOST = args.asterisk_host
    config.ASTERISK_PORT = args.asterisk_port
    config.TRANSPORT = args.transport

    # Criar demo
    demo = SIPXDemo(config)

    try:
        if args.demo:
            # Executar demo espec√≠fica
            demo_methods = [
                demo.demo_1_register,
                demo.demo_2_options,
                demo.demo_3_invite_full_flow,
                demo.demo_4_message,
                demo.demo_5_multiple_transports,
                demo.demo_6_state_management,
                demo.demo_7_server,
                demo.demo_8_complete_workflow,
            ]
            demo_methods[args.demo - 1]()
        else:
            # Executar todas as demos
            demo.run_all_demos(skip_interactive=args.skip_interactive)

    except KeyboardInterrupt:
        console.print("\n[bold yellow]Demo interrompida pelo usu√°rio[/bold yellow]")
        sys.exit(0)
    except Exception as e:
        console.print(f"\n[bold red]Erro fatal: {e}[/bold red]")
        import traceback

        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
